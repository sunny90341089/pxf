/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

buildscript {
    repositories {
        jcenter()
    }
}

plugins {
    id "com.github.hierynomus.license-report" version "0.15.0"
    id "io.franzbecker.gradle-lombok" version "3.3.0"
    id "org.springframework.boot" version "${spring_boot_version}" apply false
}

downloadLicenses {
    dependencyConfiguration = 'bundleJars'
}

def javaProjects = subprojects.findAll {
    it.name.startsWith("pxf-")
}

allprojects {
    apply plugin: "jacoco"
    apply plugin: "idea"
    apply plugin: "eclipse"

    repositories {
        jcenter()
    }
}

idea {
    project {
        jdkName = "1.8"
        languageLevel = "8"
        vcs = "Git"
    }
}

configure(javaProjects) {
    apply plugin: 'java'
    apply plugin: 'io.spring.dependency-management'
    apply plugin: "io.franzbecker.gradle-lombok"

    group = 'org.greenplum.pxf'
    version = "${version}"

    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8

    dependencyManagement {
        imports {
            mavenBom("org.springframework.boot:spring-boot-dependencies:${spring_boot_version}")
        }
        dependencies {
            dependency("commons-lang:commons-lang:2.6")
            dependency("com.google.guava:guava:20.0")
            dependency("commons-logging:commons-logging:1.2")
            dependency("commons-collections:commons-collections:3.2.2")
            dependency("commons-configuration:commons-configuration:1.10")
            dependency("commons-codec:commons-codec:1.14")

            dependency("com.fasterxml.jackson.core:jackson-databind:2.10.2")
            dependency("com.fasterxml.jackson.core:jackson-core:2.10.2")
            dependency("com.fasterxml.jackson.core:jackson-annotations:2.10.2")

            dependency("org.apache.httpcomponents:httpclient:4.5.5")
            dependency("org.apache.httpcomponents:httpcore:4.4.9")
        }
    }

    task removeIdeaOutDirectory(type: Delete) {
        file("${projectDir}/out").deleteDir()
    }

    clean {
        dependsOn(removeIdeaOutDirectory)
    }

    compileJava {
        options.compilerArgs += [
                "-g", "-Xlint:varargs", "-Xlint:cast", "-Xlint:classfile", "-Xlint:dep-ann", "-Xlint:divzero",
                "-Xlint:empty", "-Xlint:finally", "-Xlint:overrides", "-Xlint:path", "-Xlint:-processing", "-Xlint:static",
                "-Xlint:try", "-Xlint:fallthrough", "-Xlint:deprecation", "-Xlint:unchecked", "-Xlint:-options", "-Werror"
        ]
    }

    configurations {
        all*.exclude group: "javax.servlet", module: "servlet-api"
        all*.exclude module: 'spring-boot-starter-logging'
        all*.exclude group: 'org.slf4j', module: 'slf4j-log4j12'
    }
}


